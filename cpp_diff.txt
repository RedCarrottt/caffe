diff --git a/src/caffe/layers/image_data_layer.cpp b/home/halfways/ISP/caffe/src/caffe/layers/image_data_layer.cpp
index ec0fc5b..b867b6d 100644
--- a/src/caffe/layers/image_data_layer.cpp
+++ b/home/halfways/ISP/caffe/src/caffe/layers/image_data_layer.cpp
@@ -77,10 +77,17 @@ void ImageDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,
   CHECK(cv_img.data) << "Could not load " << lines_[lines_id_].first;
   // Use data_transformer to infer the expected blob shape from a cv_image.
   vector<int> top_shape = this->data_transformer_->InferBlobShape(cv_img);
+  // @halfways : InferBlobShape - return shape[4] with cv.img, using param_
+  // shape[0] = 1 (N = 1)
   this->transformed_data_.Reshape(top_shape);
+  this->input_data_.Reshape(top_shape);
   // Reshape prefetch_data and top[0] according to the batch_size.
   const int batch_size = this->layer_param_.image_data_param().batch_size();
   CHECK_GT(batch_size, 0) << "Positive batch size required";
+  // @halfways : N = batch_size (blob is based on batch)
+  // moved to the end of layer setup
+  // check point!
+  /*
   top_shape[0] = batch_size;
   for (int i = 0; i < this->prefetch_.size(); ++i) {
     this->prefetch_[i]->data_.Reshape(top_shape);
@@ -90,12 +97,219 @@ void ImageDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,
   LOG(INFO) << "output data size: " << top[0]->num() << ","
       << top[0]->channels() << "," << top[0]->height() << ","
       << top[0]->width();
+ 
+
+  // label
+  vector<int> label_shape(1, batch_size);
+  top[1]->Reshape(label_shape);
+  for (int i = 0; i < this->prefetch_.size(); ++i) {
+    this->prefetch_[i]->label_.Reshape(label_shape);
+  }
+  */
+
+// @halfways : im2col setup
+
+  // Configure the kernel size, padding, stride, and inputs.
+  ConvolutionParameter conv_param = this->layer_param_.convolution_param();
+  force_nd_im2col_ = conv_param.force_nd_im2col();
+  channel_axis_ = top[0]->CanonicalAxisIndex(conv_param.axis());
+  // @halfways : conv_param.axis()
+  // With (N, C, H, W) inputs, and axis == 1 (the default), we perform
+  // N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
+  // groups g>1) filters across the spatial axes (H, W) of the input.
+  
+  const int first_spatial_axis = channel_axis_ + 1;
+  const int num_axes = top[0]->num_axes();
+  // @halfways : num_axes() - return shape_.size(), default 4 for (N*C*H*W)
+  num_spatial_axes_ = num_axes - first_spatial_axis; // 2
+  CHECK_GE(num_spatial_axes_, 0);
+  vector<int> spatial_dim_blob_shape(1, std::max(num_spatial_axes_, 1)); // 2D
+  // Setup filter kernel dimensions (kernel_shape_).
+  kernel_shape_.Reshape(spatial_dim_blob_shape);
+  int* kernel_shape_data = kernel_shape_.mutable_cpu_data();
+  if (conv_param.has_kernel_h() || conv_param.has_kernel_w()) {
+    CHECK_EQ(num_spatial_axes_, 2)
+        << "kernel_h & kernel_w can only be used for 2D convolution.";
+    CHECK_EQ(0, conv_param.kernel_size_size())
+        << "Either kernel_size or kernel_h/w should be specified; not both.";
+    kernel_shape_data[0] = conv_param.kernel_h();
+    kernel_shape_data[1] = conv_param.kernel_w();
+  } else {
+    const int num_kernel_dims = conv_param.kernel_size_size();
+    CHECK(num_kernel_dims == 1 || num_kernel_dims == num_spatial_axes_)
+        << "kernel_size must be specified once, or once per spatial dimension "
+        << "(kernel_size specified " << num_kernel_dims << " times; "
+        << num_spatial_axes_ << " spatial dims).";
+      for (int i = 0; i < num_spatial_axes_; ++i) {
+        kernel_shape_data[i] =
+            conv_param.kernel_size((num_kernel_dims == 1) ? 0 : i);
+      }
+  }
+  for (int i = 0; i < num_spatial_axes_; ++i) {
+    CHECK_GT(kernel_shape_data[i], 0) << "Filter dimensions must be nonzero.";
+  }
+  // Setup stride dimensions (stride_).
+  stride_.Reshape(spatial_dim_blob_shape);
+  int* stride_data = stride_.mutable_cpu_data();
+  if (conv_param.has_stride_h() || conv_param.has_stride_w()) {
+    CHECK_EQ(num_spatial_axes_, 2)
+        << "stride_h & stride_w can only be used for 2D convolution.";
+    CHECK_EQ(0, conv_param.stride_size())
+        << "Either stride or stride_h/w should be specified; not both.";
+    stride_data[0] = conv_param.stride_h();
+    stride_data[1] = conv_param.stride_w();
+  } else {
+    const int num_stride_dims = conv_param.stride_size();
+    CHECK(num_stride_dims == 0 || num_stride_dims == 1 ||
+          num_stride_dims == num_spatial_axes_)
+        << "stride must be specified once, or once per spatial dimension "
+        << "(stride specified " << num_stride_dims << " times; "
+        << num_spatial_axes_ << " spatial dims).";
+    const int kDefaultStride = 1;
+    for (int i = 0; i < num_spatial_axes_; ++i) {
+      stride_data[i] = (num_stride_dims == 0) ? kDefaultStride :
+          conv_param.stride((num_stride_dims == 1) ? 0 : i);
+      CHECK_GT(stride_data[i], 0) << "Stride dimensions must be nonzero.";
+    }
+  }
+  // Setup pad dimensions (pad_).
+  pad_.Reshape(spatial_dim_blob_shape);
+  int* pad_data = pad_.mutable_cpu_data();
+  if (conv_param.has_pad_h() || conv_param.has_pad_w()) {
+    CHECK_EQ(num_spatial_axes_, 2)
+        << "pad_h & pad_w can only be used for 2D convolution.";
+    CHECK_EQ(0, conv_param.pad_size())
+        << "Either pad or pad_h/w should be specified; not both.";
+    pad_data[0] = conv_param.pad_h();
+    pad_data[1] = conv_param.pad_w();
+  } else {
+    const int num_pad_dims = conv_param.pad_size();
+    CHECK(num_pad_dims == 0 || num_pad_dims == 1 ||
+          num_pad_dims == num_spatial_axes_)
+        << "pad must be specified once, or once per spatial dimension "
+        << "(pad specified " << num_pad_dims << " times; "
+        << num_spatial_axes_ << " spatial dims).";
+    const int kDefaultPad = 0;
+    for (int i = 0; i < num_spatial_axes_; ++i) {
+      pad_data[i] = (num_pad_dims == 0) ? kDefaultPad :
+          conv_param.pad((num_pad_dims == 1) ? 0 : i);
+    }
+  }
+  // Setup dilation dimensions (dilation_).
+  dilation_.Reshape(spatial_dim_blob_shape);
+  int* dilation_data = dilation_.mutable_cpu_data();
+  const int num_dilation_dims = conv_param.dilation_size();
+  CHECK(num_dilation_dims == 0 || num_dilation_dims == 1 ||
+        num_dilation_dims == num_spatial_axes_)
+      << "dilation must be specified once, or once per spatial dimension "
+      << "(dilation specified " << num_dilation_dims << " times; "
+      << num_spatial_axes_ << " spatial dims).";
+  const int kDefaultDilation = 1;
+  for (int i = 0; i < num_spatial_axes_; ++i) {
+    dilation_data[i] = (num_dilation_dims == 0) ? kDefaultDilation :
+                       conv_param.dilation((num_dilation_dims == 1) ? 0 : i);
+  }
+  // Special case: im2col is the identity for 1x1 convolution with stride 1
+  // and no padding, so flag for skipping the buffer and transformation.
+  is_1x1_ = true;
+  for (int i = 0; i < num_spatial_axes_; ++i) {
+    is_1x1_ &=
+        kernel_shape_data[i] == 1 && stride_data[i] == 1 && pad_data[i] == 0;
+    if (!is_1x1_) { break; }
+  }
+  // Configure output channels and groups.
+  channels_ = top[0]->shape(channel_axis_);
+  group_ = this->layer_param_.convolution_param().group();
+  CHECK_EQ(channels_ % group_, 0);
+      << "Number of output should be multiples of group.";
+  conv_in_channels_ = channels_;
+  conv_out_channels_ = num_output_;
+
+  // @halfways : kernel(filter) c * h * w
+  // cannot figure out why kernel_dim_ must be applied to im2col output size
+  kernel_dim_ = conv_in_channels_ 
+	  * kernel_shape_data[0] * kernel_shape_data[1];
+
+  // @halfways : from void BaseConvolutionLayer<Dtype>::Reshape
+  // ignore any exceptional case
+
+  //num_ = top[0]->count(0, channel_axis_); // not used
+
+  // Setup input dimensions (conv_input_shape_).
+  vector<int> top_dim_blob_shape(1, num_spatial_axes_ + 1);
+  conv_input_shape_.Reshape(top_dim_blob_shape);
+  int* conv_input_shape_data = conv_input_shape_.mutable_cpu_data();
+  // num_spatial_axes = 2
+  // channel_axis_ = 1
+  // conv_input_shape_[1] = top[0]->shape[2] (H)
+  // conv_input_shape_[2] = top[0]->shape[3] (W)  
+  for (int i = 0; i < num_spatial_axes_ + 1; ++i) {
+    conv_input_shape_data[i] = top[0]->shape(channel_axis_ + i);
+  }
+
+  // The im2col result buffer will only hold one image at a time to avoid
+  // overly large memory usage. In the special case of 1x1 convolution
+  // it goes lazily unused to save memory.
+
+  // @halfways : usage of col_buffer_; direct access for data_?
+  
+  offset_ = 1;
+  col_buffer_shape_.clear();
+  col_buffer_shape_.push_back(batch_size);
+  // kernel_dim_ = kernel C * H * W
+  // why is it needed?
+  col_buffer_shape_.push_back(kernel_dim_);
+  offset_ *= kernel_dim_;
+  // OH = (H + 2P - FH) / S + 1
+  // OW = (W + 2P - FO) / S + 1
+  for (int i = 0; i < num_spatial_axes_; ++i) {
+    const int* kernel_shape_data = kernel_shape_.cpu_data();
+	const int* stride_data = stride_.cpu_data();
+	const int* pad_data = pad_.cpu_data();
+	const int* dilation_data = dilation_.cpu_data();
+	
+	const int input_dim = top_shape[i + 2];
+	const int kernel_extent = dilation_data[i] 
+		* (kernel_shape_data[i] + 1) - 1; // d * (k_h - 1) + 1?
+    const int output_dim = (input_dim + 2 * pad_data[i] - kernel_extent)
+	   	/ stride_data[i] + 1;
+	col_buffer_shape_.push_back(output_dim);
+	offset_ *= output_dim;
+  }
+
+  // @halfways : first set data_ size for im2col
+  // as capacity of data_ never shrink, it will sustain the size
+  // if once enlarged
+  for (int i = 0; i < this->prefetch_.size(); ++i) {
+	  this->prefetch_[i]->data_.Reshape(col_buffer_shape_);
+  }
+  top[0].Reshape(col_buffer_shape_);
+
+  // not used
+  //bottom_dim_ = bottom[0]->count(channel_axis_); 
+  //top_dim_ = top[0]->count(channel_axis_);
+
+  // @halfways : N = batch_size (blob is based on batch)
+  // needs to move this part to the end of layer setup
+  // check point!
+  top_shape[0] = batch_size;
+  for (int i = 0; i < this->prefetch_.size(); ++i) {
+	  this->prefetch_[i]->data_.Reshape(top_shape);
+  }
+  top[0]->Reshape(top_shape);
+
+  LOG(INFO) << "output data size: " << top[0]->num() << ","
+ 	  << top[0]->channels() << "," << top[0]->height() << ","
+ 	  << top[0]->width();
+
   // label
   vector<int> label_shape(1, batch_size);
   top[1]->Reshape(label_shape);
   for (int i = 0; i < this->prefetch_.size(); ++i) {
     this->prefetch_[i]->label_.Reshape(label_shape);
   }
+
+// @halfways : check point - col_buffer_ + kernel_dim_
 }
 
 template <typename Dtype>
@@ -129,7 +343,8 @@ void ImageDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {
   CHECK(cv_img.data) << "Could not load " << lines_[lines_id_].first;
   // Use data_transformer to infer the expected blob shape from a cv_img.
   vector<int> top_shape = this->data_transformer_->InferBlobShape(cv_img);
-  this->transformed_data_.Reshape(top_shape);
+  //this->transformed_data_.Reshape(top_shape);
+  this->input_data_.Reshape(top_shape);
   // Reshape batch according to the batch_size.
   top_shape[0] = batch_size;
   batch->data_.Reshape(top_shape);
@@ -149,10 +364,20 @@ void ImageDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {
     read_time += timer.MicroSeconds();
     timer.Start();
     // Apply transformations (mirror, crop...) to the image
-    int offset = batch->data_.offset(item_id);
+	int offset = batch->data_.offset(item_id); // offset = C * H * W
     this->transformed_data_.set_cpu_data(prefetch_data + offset);
     this->data_transformer_->Transform(cv_img, &(this->transformed_data_));
-    trans_time += timer.MicroSeconds();
+
+	// @halfways : Transform -> im2col with direct access to prefetch_data
+	// 1) Transform to get input of im2col in temp
+	// 2) put into im2col to get col
+
+	//int offset = offset_ * item_id;
+	//this->transformed_data_.set_cpu_data(prefetch_data + offset);
+	//this->data_transformer_->Transform(cv_img, &(this->input_data_));
+	//conv_im2col_cpu(this->input_data_, this->transformed_data);
+
+	trans_time += timer.MicroSeconds();
 
     prefetch_label[item_id] = lines_[lines_id_].second;
     // go to the next iter
